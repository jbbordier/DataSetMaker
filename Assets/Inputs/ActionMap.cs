//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Inputs/ActionMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ActionMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ActionMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ActionMap"",
    ""maps"": [
        {
            ""name"": ""LeftHand"",
            ""id"": ""35445e4e-dfff-41df-ab99-9e925c7dd179"",
            ""actions"": [
                {
                    ""name"": ""Recording"",
                    ""type"": ""Button"",
                    ""id"": ""217bfae1-9fbd-43dd-8a4e-94d99f68a969"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cf22c3e3-016b-4dca-84b2-0197ef434767"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1d6ed10f-625b-4424-b7b4-2d22f15013cd"",
                    ""path"": ""<XRController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Recording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""accdedec-75bd-4822-b286-cf6f316c8304"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LeftHand
        m_LeftHand = asset.FindActionMap("LeftHand", throwIfNotFound: true);
        m_LeftHand_Recording = m_LeftHand.FindAction("Recording", throwIfNotFound: true);
        m_LeftHand_Newaction = m_LeftHand.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LeftHand
    private readonly InputActionMap m_LeftHand;
    private ILeftHandActions m_LeftHandActionsCallbackInterface;
    private readonly InputAction m_LeftHand_Recording;
    private readonly InputAction m_LeftHand_Newaction;
    public struct LeftHandActions
    {
        private @ActionMap m_Wrapper;
        public LeftHandActions(@ActionMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Recording => m_Wrapper.m_LeftHand_Recording;
        public InputAction @Newaction => m_Wrapper.m_LeftHand_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_LeftHand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LeftHandActions set) { return set.Get(); }
        public void SetCallbacks(ILeftHandActions instance)
        {
            if (m_Wrapper.m_LeftHandActionsCallbackInterface != null)
            {
                @Recording.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRecording;
                @Recording.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRecording;
                @Recording.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnRecording;
                @Newaction.started -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_LeftHandActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_LeftHandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Recording.started += instance.OnRecording;
                @Recording.performed += instance.OnRecording;
                @Recording.canceled += instance.OnRecording;
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public LeftHandActions @LeftHand => new LeftHandActions(this);
    public interface ILeftHandActions
    {
        void OnRecording(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
}
